✅ Q1 : Route GET /hello
🔧 Code :
python
Copier
Modifier
from fastapi import FastAPI
from fastapi.responses import PlainTextResponse

app = FastAPI()

@app.get("/hello", response_class=PlainTextResponse)
def hello():
    return "Hello world"
📮 Postman :
Méthode : GET

URL : http://localhost:8000/hello

Aucune donnée

Status code attendu : 200 OK

Réponse : Hello world

✅ Q2 : Route GET /welcome?name=Ryan
🔧 Code :
python
Copier
Modifier
@app.get("/welcome")
def welcome(name: str):
    return {"message": f"Welcome {name}"}
📮 Postman :
Méthode : GET

URL : http://localhost:8000/welcome?name=Ryan

Réponse : {"message": "Welcome Ryan"}

Status code : 200 OK

✅ Q3 : Route POST /students (ajout d’élèves)
🔧 Code :
python
Copier
Modifier
from pydantic import BaseModel
from typing import List

students = []

class Student(BaseModel):
    Reference: str
    FirstName: str
    LastName: str
    Age: int

@app.post("/students", status_code=201)
def add_students(new_students: List[Student]):
    students.extend(new_students)
    return students
📮 Postman :
Méthode : POST

URL : http://localhost:8000/students

Body (JSON) :

json
Copier
Modifier
[
  {
    "Reference": "S001",
    "FirstName": "Jean",
    "LastName": "Rakoto",
    "Age": 21
  },
  {
    "Reference": "S002",
    "FirstName": "Lisa",
    "LastName": "Raharinirina",
    "Age": 20
  }
]
Status code attendu : 201 Created

Réponse : liste des étudiants en mémoire

✅ Q4 : Route GET /students (afficher la liste)
🔧 Code :
python
Copier
Modifier
@app.get("/students")
def get_students():
    return students
📮 Postman :
Méthode : GET

URL : http://localhost:8000/students

Réponse : liste des objets étudiants

Status code : 200 OK

✅ Q5 : Route PUT /students (update ou insert)
🔧 Code :
python
Copier
Modifier
@app.put("/students")
def update_student(student: Student):
    for index, s in enumerate(students):
        if s.Reference == student.Reference:
            students[index] = student
            return {"message": "Student updated"}
    students.append(student)
    return {"message": "Student added"}
📮 Postman :
Méthode : PUT

URL : http://localhost:8000/students

Body (JSON) :

json
Copier
Modifier
{
  "Reference": "S001",
  "FirstName": "Jean-Modifié",
  "LastName": "Rakoto",
  "Age": 22
}
Réponse : "Student updated" ou "Student added"

Status code : 200 OK ou personnalisable

✅ Q6 : Captures d’écran dans le dossier postman
Crée un dossier dans ton projet : postman/

Fais une capture d’écran dans Postman pour chaque requête (Q1 à Q5)

Renomme chaque image : Q1.png, Q2.png, Q3.png, Q4.png, Q5.png

Chaque image = 1 point si la route fonctionne

🌟 BONUS : Route sécurisée GET /students-authorized
🔧 Code :
python
Copier
Modifier
from fastapi import Request
from fastapi.responses import JSONResponse
from starlette.status import HTTP_401_UNAUTHORIZED, HTTP_403_FORBIDDEN

@app.get("/students-authorized")
def get_students_authorized(request: Request):
    auth = request.headers.get("Authorization")
    if not auth:
        return JSONResponse(
            {"error": "Non autorisé"},
            status_code=HTTP_401_UNAUTHORIZED
        )
    elif auth != "bon courage":
        return JSONResponse(
            {"error": "Accès interdit"},
            status_code=HTTP_403_FORBIDDEN
        )
    return students
📮 Postman :
Méthode : GET

URL : http://localhost:8000/students-authorized

Headers :

Authorization: bon courage

Statuts possibles :

✅ 200 OK si tout va bien

❌ 401 Unauthorized si header manquant

❌ 403 Forbidden si mauvaise valeur